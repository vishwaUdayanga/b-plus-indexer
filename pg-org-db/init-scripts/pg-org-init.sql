CREATE DATABASE sampled_org_database;
\c sampled_org_database

CREATE EXTENSION pg_stat_statements;

CREATE TABLE operation_bulletin (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    selected_operations INTEGER[] NOT NULL,
    full_plan_selected_operations INTEGER[] NOT NULL,
    sample_number VARCHAR(50) NOT NULL,
    item_code VARCHAR(50),
    smallest_size INTEGER,
    largest_size INTEGER,
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    image TEXT,
    created_by TEXT,
    deleted_time TIMESTAMP,
    deleted_by TEXT
);

WITH RECURSIVE generate_rows AS (SELECT 1 AS id UNION ALL SELECT id + 1 FROM generate_rows WHERE id < 2000) INSERT INTO operation_bulletin (selected_operations, full_plan_selected_operations, sample_number, item_code, smallest_size, largest_size, created_time, image, created_by, deleted_time, deleted_by) SELECT ARRAY[1, 2, 3]::INTEGER[], ARRAY[4, 5, 6]::INTEGER[], 'SAMPLE-' || id, 'ITEM-' || id, (id % 5) + 1, (id % 5) + 10, CURRENT_TIMESTAMP - (id || ' minutes')::INTERVAL, 'http://example.com/image.jpg', 'user_' || (id % 10), NULL, CASE WHEN RANDOM() < 0.05 THEN '' ELSE 'admin' END AS deleted_by FROM generate_rows;

CREATE TABLE sheet_inventory (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rack INTEGER,
    shelf INTEGER,
    sheet_reference VARCHAR(50),
    sheet_code VARCHAR(50),
    ansel VARCHAR(50),
    dss VARCHAR(50),
    export VARCHAR(50),
    other_brand VARCHAR(50),
    own_brand VARCHAR(50),
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by VARCHAR(250),
    edited_time TIMESTAMP,
    edited_by VARCHAR(250),
    history TEXT,
    removed VARCHAR(50)
);

WITH RECURSIVE generate_rows AS (SELECT 1 AS id UNION ALL SELECT id + 1 FROM generate_rows WHERE id < 2000) INSERT INTO sheet_inventory (rack, shelf, sheet_reference, sheet_code, ansel, dss, export, other_brand, own_brand, created_time, created_by, edited_time, edited_by, history, removed) SELECT (id % 10) + 1, (id % 5) + 1, 'REF-' || id, 'CODE-' || id, 'ANSEL-' || id, 'DSS-' || id, 'EXPORT-' || id, 'OTHER-' || id, 'OWN-' || id, CURRENT_TIMESTAMP - (id || ' minutes')::INTERVAL, 'user_' || (id % 10), CURRENT_TIMESTAMP - (id || ' minutes')::INTERVAL, 'user_' || (id % 10), 'History text for row ' || id, CASE WHEN RANDOM() < 0.05 THEN '' ELSE 'removed' END FROM generate_rows;

CREATE TABLE smvdatabase (id INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY PRIMARY KEY, operation_code VARCHAR(100), operation_description INTEGER, running_smv VARCHAR(10), running_video VARCHAR(255), initial_smv VARCHAR(10), machine_type INTEGER, item_code VARCHAR(100), operation_grading INTEGER, operation_criticalness INTEGER, unit INTEGER, no_of_pieces INTEGER, no_of_layers INTEGER, features TEXT, remarks TEXT, revised_item_codes TEXT, plant INTEGER, item_category INTEGER, department_type INTEGER, material_type INTEGER, work_center INTEGER, operation_no INTEGER, component_part INTEGER, initial_time_study_sheet VARCHAR(255), initial_standard_work_sheet VARCHAR(255), sample_image VARCHAR(255) NOT NULL, created_time TIMESTAMP NULL, created_by_id INTEGER, edited_time TIMESTAMP NULL, edited_by_id INTEGER, mp INTEGER, bp INTEGER, kp INTEGER, sp INTEGER);

WITH RECURSIVE generate_rows AS (SELECT 1 AS id UNION ALL SELECT id + 1 FROM generate_rows WHERE id < 1000) INSERT INTO smvdatabase (operation_code, operation_description, running_smv, running_video, initial_smv, machine_type, item_code, operation_grading, operation_criticalness, unit, no_of_pieces, no_of_layers, features, remarks, revised_item_codes, plant, item_category, department_type, material_type, work_center, operation_no, component_part, initial_time_study_sheet, initial_standard_work_sheet, sample_image, created_time, created_by_id, edited_time, edited_by_id, mp, bp, kp, sp) SELECT 'OP-' || id, id % 50, 'SMV-' || id, 'video_' || id || '.mp4', 'INIT-' || id, id % 5, 'ITEM-' || id, id % 3, id % 4, id % 6, id % 7, id % 2, 'Features of op ' || id, 'Remarks for op ' || id, 'Codes ' || id, id % 10, id % 8, id % 6, id % 5, id % 7, id, id % 9, 'study_' || id || '.pdf', 'work_' || id || '.pdf', 'sample_' || id || '.png', NOW() - (id || ' minutes')::INTERVAL, id % 10, NOW() - (id || ' minutes')::INTERVAL, id % 10, id % 10, id % 8, id % 6, id % 4 FROM generate_rows;

CREATE TABLE operation_images (
    operation_index_no INTEGER,
    image_number INTEGER,
    image TEXT
);

WITH RECURSIVE gen AS (
    SELECT 1 AS operation_index_no, 0 AS image_number
    UNION ALL
    SELECT operation_index_no + CASE WHEN image_number = 1 THEN 1 ELSE 0 END, (image_number + 1) % 2
    FROM gen
    WHERE operation_index_no < 1000
)
INSERT INTO operation_images (operation_index_no, image_number, image)
SELECT 
    operation_index_no, 
    image_number,
    LPAD((160 + operation_index_no)::TEXT, 3, '0') || '_CODE' || operation_index_no || '_IMAGE' || 
    CASE WHEN image_number = 0 THEN '___Untitled-' || (operation_index_no % 60 + 1) || '.jpg'
         ELSE '-1___Untitled-' || (operation_index_no % 99 + 1) || '.jpg'
    END
FROM gen;

CREATE TABLE operation_description (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    operation_description TEXT,
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by TEXT,
    edited_time TIMESTAMP,
    edited_by TEXT
);

WITH RECURSIVE generate_rows AS (SELECT 1 AS id UNION ALL SELECT id + 1 FROM generate_rows WHERE id < 1000) INSERT INTO operation_description (operation_description, created_time, created_by, edited_time, edited_by) SELECT 'Description for operation ' || id, CURRENT_TIMESTAMP - (id || ' minutes')::INTERVAL, 'user_' || (id % 10), CURRENT_TIMESTAMP - (id || ' minutes')::INTERVAL, 'user_' || (id % 10) FROM generate_rows;
